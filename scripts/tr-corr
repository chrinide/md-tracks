#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track
from tracks.log import usage_tail

import numpy
from optparse import OptionParser


usage = """%prog [options] input1 input2 [input3 ...]

%prog computes the correlation coefficient between ${input1} and all the
subsequent inputs. The results are printed on screen.
""" + usage_tail

parser = OptionParser(usage)
(options, args) = parser.parse_args()


if len(args) >= 2:
    path_one = args[0]
    paths_other = args[1:]
else:
    parser.error("Expecting at least two argument.")

one = load_track(path_one)
one = one - one.mean()
one /= one.std()
for path_other in paths_other:
    other = load_track(path_other)
    other = other - other.mean()
    other /= other.std()
    cc = (one*other).mean()
    cc = numpy.clip(cc, -1, 1)
    print "cc('%s','%s') = % 4.0f %%" % (path_one, path_other, cc*100)


