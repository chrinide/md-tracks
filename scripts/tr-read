#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from molmod.units import parse_unit
from tracks import TracksJoiner, parse_slice, log
import numpy
from optparse import OptionParser


usage = """%prog [options] [unit1] input1 [[unit2] input2 ...]

%prog prints the contents of the tracks ${input*} to stdout, one column per
input track, one row per time step. The values are tab separated. Optionally
each input track can be prepended with a unit that will be used to write the
data on screen. (The tracks store the data in atomic units.) The first unit
defaults to au. If an input has no unit defined, the unit for the previous
input is used.

%prog -h prints out all available options."""

parser = OptionParser(usage)
parser.add_option(
    "-s", "--slice", default="::",
    help="Subsample the input track with the given slice start:stop:step "
         "where start, stop and step must be integers or can be omitted. "
         "The slice interpretation is pythonic. [default=%default]",
)
parser.add_option(
    "-q", "--quiet", action="store_false", dest="verbose", default=True,
    help="Don't print any output."
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) >= 1:
    units = []
    paths_in = []
    for arg in args:
        try:
            units.append(parse_unit(arg))
            if len(units) > len(paths_in)+1:
                parser.error("Two subsequent units found without an input track in between.")
        except ValueError:
            paths_in.append(arg)
            if len(units) < len(paths_in):
                if len(units) == 0:
                    units.append(1)
                else:
                    units.append(units[-1])
    if len(units) > len(paths_in):
        parser.error("The arguments list ends with a unit.")
else:
    parser.error("Expecting at least one argument.")

sub = parse_slice(options.slice)
tracks_joiner = TracksJoiner(paths_in)
units = numpy.array(units)
for row in tracks_joiner.yield_rows(sub):
    print "\t".join(str(value) for value in row/units)

