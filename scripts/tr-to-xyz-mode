#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track
from tracks.util import AtomFilter
from tracks.log import usage_tail
from tracks.optparse import add_filter_atoms_option

from molmod.units import parse_unit
from molmod.io.xyz import XYZFile, XYZWriter
from molmod.periodic import periodic

from optparse import OptionParser
import numpy


usage = """%prog [options] mode ref.xyz output.xyz

%prog generates an XYZ file that visualizes the given eigen mode, e.g. a mode
obtained with tr-pca-geom. It is assumed that the mode is mass weighted.

Arguments:
  mode  --  The track with the mode to be visualized
  ref.xyz  --  An average structure to which the mode should be added
  output.xyz  --  The output file that contains the trajectory, can be
                  visualized with vmd

""" + usage_tail

parser = OptionParser(usage)
add_filter_atoms_option(parser)
parser.add_option(
    "-u", "--unit", default="angstrom",
    help="The unit in which the data in the xyz file are written. [default=%default]",
)
parser.add_option(
    "--amp",
    help="Set the amplitude of the mode in the output file. When not given, "
         "a reasonable guess is made based on the size of the molecule."
)
parser.add_option(
    "-n", "--num-steps", default=60,
    help="The numer of steps in the output trajectory. [default=%default]"
)
(options, args) = parser.parse_args()


if len(args) == 3:
    mode_path, fn_reference, fn_output = args
else:
    parser.error("Expecting three arguments.")

ref_xyz = XYZFile(fn_reference)
ref_mol = ref_xyz.get_molecule()
mode = load_track(mode_path)
mode /= numpy.linalg.norm(mode)

atom_filter = AtomFilter(options.filter_atoms)

# atom selection
if atom_filter.filter_atoms is None:
    atom_indexes = numpy.arange(ref_mol.size)
else:
    atom_indexes = numpy.array(atom_filter.filter_atoms)
    atom_indexes.sort()
    if atom_indexes[0] < 0 or atom_indexes[-1] >= ref_mol.size:
        parser.error("The indexes in the atom filter are out of range")

if options.amp is None:
    options.amp = ref_mol.coordinates[atom_indexes].std(axis=0).max()*0.4
else:
    options.amp = parse_unit(options.amp)

xyz_writer = XYZWriter(fn_output, ref_xyz.symbols)
step = 2*numpy.pi/options.num_steps
ref_pos = ref_mol.coordinates[atom_indexes]
masses = numpy.array([periodic[ref_mol.numbers[index]].mass for index in atom_indexes])
mode_pos = mode.reshape((-1,3))[atom_indexes]/numpy.sqrt(masses.reshape((-1,1)))
mode_pos /= numpy.linalg.norm(mode_pos)
for i in xrange(options.num_steps):
    xyz_writer.dump(
        "Angle = %.1f" % (i*step/numpy.pi*180),
        ref_pos + numpy.sin(i*step)*mode_pos*options.amp
    )


