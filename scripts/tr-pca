#!/usr/bin/env python
# -*- coding: utf-8 -*-
# MD-Tracks is a trajectory analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2012 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
#--


from tracks.parse import parse_slice
from tracks.optparse import add_quiet_option, add_slice_option, \
    add_pca_options, add_zero_mean_option
from tracks.log import log, usage_tail
from tracks.api import pca_common_usage, pca_common_script

from molmod.units import parse_unit

import numpy
from optparse import OptionParser


usage = """%prog [options] input1 input2 [input3...] output_prefix

%prog applies principal component analysis to the input tracks. An overview
of the eigenvalues and the cosine contents is printed on screen

""" + pca_common_usage + usage_tail

parser = OptionParser(usage)
add_quiet_option(parser)
add_slice_option(parser)
add_pca_options(parser, "au")
add_zero_mean_option(parser)
(options, args) = parser.parse_args()

if len(args) >= 2:
    paths_in = args[:-1]
    output_prefix = args[-1]
else:
    parser.error("Expecting at least two arguments.")

# parse options
sub = parse_slice(options.slice)
unit = parse_unit(options.unit)
log.verbose = options.verbose

# prepare for pca
dtype = numpy.dtype([("data", float, len(paths_in))])
if options.zero_mean:
    reference = numpy.zeros(len(paths_in), float)
else:
    reference = None

# call the pca script
pca_common_script(
    paths_in, dtype, sub, None, options.corr_coeff, reference,
    output_prefix, options.num_levels, options.dump_pcs, options.unit, unit
)


