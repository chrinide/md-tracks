#!/usr/bin/env python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.convert import dlpoly_output_to_tracks
from tracks.parse import parse_slice
from tracks.optparse import add_quiet_option, add_slice_option, add_append_option
from tracks.log import log, usage_tail

from molmod.units import parse_unit

from optparse import OptionParser


usage = """%prog filename [output_directory]

%prog transforms the given dl_poly output file into tracks

The following files will be generated in the output directory (which defaults
to 'tracks'):

    step, conserved_quantity, temperature, potential_energy, vanderwaals_energy,
    coulomb_energy, bond_energy, bending_energy, torsion_energy,
    tethering_energy, time, enthalpy, rotational_temperature, virial,
    vanderwaals_virial, coulomb_virial, bond_viral, bending_virial,
    constraint_virial, tethering_virial, cputime, volume, shell_temperature,
    shell_energy, shell_virial, cell.alpha, cell.beta, cell.gamma, pmf_virial
    and pressure

The values in the tracks are always converted to atomic units.
""" + usage_tail

parser = OptionParser(usage)
add_slice_option(parser)
add_quiet_option(parser)
add_append_option(parser)
parser.add_option(
    "-p", "--pos-unit", default='A',
    help="The unit used in the dl_poly output file for positions and lengths. "
    "[default=%default]",
)
parser.add_option(
    "-t", "--time-unit", default='ps',
    help="The unit used in the dl_poly output file for the simulation time. "
    "[default=%default]",
)
parser.add_option(
    "-a", "--angle-unit", default='deg',
    help="The unit used in the dl_poly output file for angles. "
    "[default=%default]",
)
parser.add_option(
    "-e", "--energy-unit", default='amu*(A/ps)**2',
    help="The unit used in the dl_poly output file for energies and virials. "
    "[default=%default]",
)
parser.add_option(
    "--no-skip", default=True, action="store_false", dest="skip",
    help="The not skip the equilibration data.",
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) == 1:
    filename = args[0]
    output_dir = "tracks"
elif len(args) == 2:
    filename, output_dir = args
else:
    parser.error("Expecting one or two arguments.")

sub = parse_slice(options.slice)
pos_unit = parse_unit(options.pos_unit)
time_unit = parse_unit(options.time_unit)
angle_unit = parse_unit(options.angle_unit)
energy_unit = parse_unit(options.energy_unit)
dlpoly_output_to_tracks(
    filename, output_dir, sub=sub, clear=options.clear,
    skip_equi_period=options.skip, pos_unit=pos_unit, time_unit=time_unit,
    angle_unit=angle_unit, e_unit=energy_unit
)


