#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import dump_track
from tracks.parse import parse_slice
from tracks.optparse import add_quiet_option, add_slice_option
from tracks.log import log, usage_tail
import tracks.vector as vector

import numpy
from optparse import OptionParser


usage = """%prog [options] pos_prefix1 pos_prefix2 [vel_prefix1 vel_prefix2] pos_output [vel_output]

%prog computes the distance between the atom ${pos_prefix1} and ${pos_prefix2}
for all time steps. Tracks with the given prefixes must exist, and their
filenames must look like: ${pos_prefix*}.c where c is x, y or z. The output is
stored in ${pos_output}.

If the arguments ${vel_prefix*} are given, also the time derivative of the
distance is computed.  Tracks with the given prefixes must exist, and their
filenames must look like: ${vel_prefix*}.c where c is x, y or z. The output is
stored in ${vel_output}.
""" + usage_tail

parser = OptionParser(usage)
add_slice_option(parser)
add_quiet_option(parser)
(options, args) = parser.parse_args()

log.verbose = options.verbose
if len(args) == 3:
    pos_prefix1, pos_prefix2, pos_output_path = args
    vel_prefix1 = None
    vel_prefix2 = None
    vel_output_path = None
elif len(args) == 6:
    pos_prefix1, pos_prefix2, vel_prefix1, vel_prefix2, pos_output_path, vel_output_path = args
else:
    parser.error("Expecting three or six arguments.")

sub = parse_slice(options.slice)
if vel_output_path is None:
    dump_track(pos_output_path, vector.dist(
        vector.TrackVector.from_prefix(pos_prefix1, sub),
        vector.TrackVector.from_prefix(pos_prefix2, sub),
    ))
    log("WRITTEN: %s" % pos_output_path)
else:
    dist_pos, dist_vel = vector.dist(
        vector.TrackVector.from_prefix(pos_prefix1, sub),
        vector.TrackVector.from_prefix(pos_prefix2, sub),
        vector.TrackVector.from_prefix(vel_prefix1, sub),
        vector.TrackVector.from_prefix(vel_prefix2, sub),
    )
    dump_track(pos_output_path, dist_pos)
    log("WRITTEN: %s" % pos_output_path)
    dump_track(vel_output_path, dist_vel)
    log("WRITTEN: %s" % vel_output_path)




