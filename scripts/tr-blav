#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2009 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track, dump_track
from tracks.parse import parse_x_step, parse_slice
from tracks.optparse import add_quiet_option, add_slice_option, add_cor_time_unit
from tracks.log import log, usage_tail
from tracks.api import mean_error_blav

from molmod.units import parse_unit

import numpy
from optparse import OptionParser


usage = """%prog [options] input {time_axis|timestep}

%prog applies the block average method track ${input}. It prints out a line with
estimates of the following values:
 * the mean
 * the error on the mean
 * the correlation time
 * the statistical inefficiency
""" + usage_tail

parser = OptionParser(usage)
parser.add_option(
    "--plot-error",
    help="Plot the relation between blocksize and statistical error on "
         "the mean, and save the figure as ${PLOT_ERROR}.",
)
parser.add_option(
    "--plot-ctime",
    help="Plot the relation between blocksize and the correlation time, and "
         "save the figure as ${PLOT_CTIME}.",
)
parser.add_option(
    "-u", "--unit", default='au',
    help="The mean and error are printed in the given UNIT. [default=%default]",
)
add_cor_time_unit(parser)
add_quiet_option(parser)
parser.add_option(
    "-b", "--min-blocks", default="100", type="int",
    help="The minimum number of blocks to be considered."
)
add_slice_option(parser)
(options, args) = parser.parse_args()


class Error(Exception):
    pass


log.verbose = options.verbose
if len(args) == 2:
    path_in = args[0]
    time_step = parse_x_step(args[1])
else:
    parser.error("Expecting two arguments.")

sub = parse_slice(options.slice)
unit = parse_unit(options.unit)
time_unit = parse_unit(options.time_unit)
time_step *= sub.step
f = load_track(path_in, sub)


mean, einf, cinf, sinf, be, bc, bs, x, e, c, s, l = mean_error_blav(time_step, f, options.min_blocks)


print "%s %s %s %s" % (mean/unit, einf/unit, cinf/time_unit, sinf)

if options.plot_error is not None:
    if cinf != numpy.inf:
        import pylab
        pylab.clf()
        pylab.title("Block average plot for %s" % path_in)
        pylab.xlabel("Block size [%s]" % options.time_unit)
        pylab.ylabel("Error on the mean [%s]" % options.unit)
        pylab.plot(x/time_unit,e/unit,"k+")
        pylab.plot(x[-l:]/time_unit,(einf+be/x[-l:])/unit,"r-", linewidth=1)
        pylab.axhline(einf/unit, color="r", linewidth=1)
        pylab.grid(True,linestyle="-",linewidth=0.2, alpha=0.5)
        pylab.savefig(options.plot_error)
    else:
        log('Block average plot skipped due to cinf=numpy.inf.')

if options.plot_ctime is not None:
    if sinf != numpy.inf:
        import pylab
        pylab.clf()
        pylab.title("Block average plot for %s" % path_in)
        pylab.xlabel("Block size [%s]" % options.time_unit)
        pylab.ylabel("Correlation time [%s]" % options.time_unit)
        pylab.plot(x/time_unit,c/time_unit,"k+")
        pylab.plot(x[-l:]/time_unit,(cinf+bc/x[-l:])/time_unit,"r-", linewidth=1)
        pylab.axhline(cinf/time_unit, color="r", linewidth=1)
        pylab.grid(True,linestyle="-",linewidth=0.2, alpha=0.5)
        pylab.savefig(options.plot_ctime)
    else:
        log('Block average plot skipped due to sinf=numpy.inf.')


