#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track, dump_track
import molmod.units
import molmod.constants
from molmod.data import periodic, bonds

from optparse import OptionParser


usage = """%prog [options] [var1=input1 [var2=input2 ...]] expression [output]

%prog evaluates ${expression} on the data in the tracks ${input*} and writes
the result to ${output}. The ${expression} can be any valid python epxression
that uses ${val*}, the constants defined in molmod.units and molmod.constants,
and periodic and bonds from molmod.data. If not input or output tracks are
given, the outcome of the expression is printed on screen.

%prog -h prints out all available options."""

parser = OptionParser(usage)
parser.add_option(
    "-s", "--slice", default="::",
    help="Subsample the input track with the given slice start:stop:step "
         "where start, stop and step must be integers or can be omitted. "
         "The slice interpretation is pythonic. [default=%default]",
)
parser.add_option(
    "-p", "--print-globals", action="store_true", default=False,
    help="Print all the constants that can be used in the expression and exit."
)
(options, args) = parser.parse_args()


def load_constants(m):
    names = dir(m)
    values = [eval("m.%s" % name, {"m": m}) for name in names]
    result = dict((name, value) for name, value in zip(names, values) if isinstance(value, float))
    return result

g = {}
g.update(load_constants(molmod.units))
g.update(load_constants(molmod.constants))
g["periodic"] = periodic
g["bonds"] = bonds

message = """All values are in atomic units. These constants can be used to
convert from and to atomic units. For example:

  3*A = a distance of three angstroms in atomic units.
  3/A = a distance of three atomic units in angstroms.

Conventionally, all tracks are contain data in atomic units.
"""

if options.print_globals:
    print message
    for name, value in sorted(g.iteritems()):
        if isinstance(value, float):
            print "%15s=%10.7e" % (name, value)
        else:
            print "%15s=%s" % (name, value)
else:
    if len(args) == 2:
        parser.error("Expecting One, three or more arguments, not two.")
    elif len(args) == 1:
        expression = args[0]
        print eval(expression, g)
    elif len(args) >= 3:
        expression = args[-2]
        path_out = args[-1]
        for word in args[:-2]:
            if word.count("=") != 1:
                parser.error("Each input stanza must contain exactly one '=' character.")
        inputs = [word.split("=") for word in args[:-2]]
        for name, path_in in inputs:
            g[name] = load_track(path_in)
        dump_track(path_out, eval(expression, g))

