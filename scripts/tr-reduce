#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track, dump_track
from tracks.optparse import add_quiet_option, add_slice_option
from tracks.parse import parse_slice
from tracks.log import log, usage_tail

from optparse import OptionParser


usage = """%prog [options] input1 [input2 ...] block_size

%prog subsamples the input by taking block averages. The block averages are
written to ${input*}.red. The standard deviation of the values within a
block are written to ${input*}.red.std. This is tool is mainly usefull for
plotting very long time series in a comprehensible fashion.
""" + usage_tail

parser = OptionParser(usage)
add_slice_option(parser)
add_quiet_option(parser)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) >= 2:
    paths_in = args[:-1]
    block_size = int(args[-1])
else:
    parser.error("Expecting two or more arguments.")

sub = parse_slice(options.slice)

for path_in in paths_in:
    inp = load_track(path_in, sub)
    inp = inp[:(len(inp)/block_size)*block_size]
    inp = inp.reshape((-1, block_size))
    reduced = inp.mean(axis=1)
    reduced_std = inp.std(axis=1)
    reduced_min = inp.min(axis=1)
    reduced_max = inp.max(axis=-1)

    path_out = "%s.red" % path_in
    dump_track(path_out, reduced)
    log("WRITTEN %s" % path_out)

    path_std = "%s.red.std" % path_in
    dump_track(path_std, reduced_std)
    log("WRITTEN %s" % path_std)

    path_std = "%s.red.min" % path_in
    dump_track(path_std, reduced_min)
    log("WRITTEN %s" % path_std)

    path_std = "%s.red.max" % path_in
    dump_track(path_std, reduced_max)
    log("WRITTEN %s" % path_std)


