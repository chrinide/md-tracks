#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --



from tracks.core import load_track, dump_track
from tracks.parse import parse_x_step
from tracks.optparse import add_quiet_option, add_blocks_option
from tracks.log import log, usage_tail
from tracks.api import SpectrumProcessor

import numpy

from optparse import OptionParser


usage = """%prog input1 [input2 ...] {time_axis|time_step} output_prefix

%prog computes the power spectrum of the given inputs. Four outputs are written:
written:

The frequency axis: ${output_prefix}.frequencies
The wavenumber axis: ${output_prefix}.wavenumbers
The amplitudes: ${output_prefix}.amplitudes
The statistical error on the amplitudes: ${output_prefix}.amplitudes.err
""" + usage_tail

parser = OptionParser(usage)
add_quiet_option(parser)
add_blocks_option(parser)
(options, args) = parser.parse_args()

if len(args) >= 3:
    paths_in = args[:-2]
    time_step = parse_x_step(args[-2])
    output_prefix = args[-1]
else:
    parser.error("Expecting at least three arguments.")

num_blocks = int(options.blocks)

# generate the spectrum
sp = SpectrumProcessor(time_step, num_blocks)
for path_in in paths_in:
    log("PROCESSING %s" % path_in)
    f = load_track(path_in)
    sp.process(f)
freq_res, wave_res, amp, amp_err = sp.get_results()

dump_track("%s.amplitudes" % output_prefix, amp)
log("WRITTEN %s.amplitudes" % output_prefix)
dump_track("%s.amplitudes.err" % output_prefix, amp_err)
log("WRITTEN %s.amplitudes.err" % output_prefix)
# print the overall statistical error:
print "Average relative statistical error: %.2f %%" % (2*amp_err.std()/amp.max()*100)

# the frequency and wavenumber axis
dump_track("%s.wavenumbers" % output_prefix, wave_res*numpy.arange(sp.block_size))
log("WRITTEN %s.wavenumbers" % output_prefix)
dump_track("%s.frequencies" % output_prefix, freq_res*numpy.arange(sp.block_size))
log("WRITTEN %s.frequencies" % output_prefix)


