#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.parse import parse_slice
from tracks.optparse import add_quiet_option, add_slice_option, \
    add_filter_atoms_option, add_pca_options
from tracks.util import AtomFilter
from tracks.log import log, usage_tail
from tracks.api import pca_common_usage, pca_common_script

from molmod.periodic import periodic
from molmod.io.xyz import XYZFile
from molmod.units import parse_unit
from molmod.molecules import Molecule

import numpy
from optparse import OptionParser


usage = """%prog [options] pos_prefix reference.xyz output_prefix [average.xyz]

%prog applies principal component analysis to a set of time dependent
coordinates. The ${pos_prefix} is the prefix of the tracks that contains the
(fitted) Cartesian coordinates. ${reference.xyz} is used to obtain the atomic
masses and can also serve as a predefined average geometry.
""" + pca_common_usage + """
Unless the option --reference is used, the average Cartesian coordinates are
written to a file ${average.xyz}. They can be used for vizualizing the modes.
(See tr-to-xyz-mode)
""" + usage_tail

parser = OptionParser(usage)
add_quiet_option(parser)
add_slice_option(parser)
add_filter_atoms_option(parser)
add_pca_options(parser, "A*amu**0.5")
parser.add_option(
    "-r", "--reference", action="store_true", default=False,
    help="Use the reference geometry as the average around which the "
         "oscillations are supposed to take place. The mean geometry is not "
         "written to reference.av.xyz.",
)
(options, args) = parser.parse_args()

if options.reference:
    if len(args) == 3:
        pos_prefix, fn_reference, output_prefix = args
        fn_average = None
    else:
        parser.error("Expecting three arguments.")
else:
    if len(args) == 4:
        pos_prefix, fn_reference, output_prefix, fn_average = args
    else:
        parser.error("Expecting four arguments.")

# parse options
sub = parse_slice(options.slice)
unit = parse_unit(options.unit)
atom_filter = AtomFilter(options.filter_atoms)
log.verbose = options.verbose

# determine the atom symbols and the number of atoms
ref_xyz = XYZFile(fn_reference)
ref_mol = ref_xyz.get_molecule()
# load the reference geometry
ref_mol = XYZFile(fn_reference).get_molecule()
if atom_filter.filter_atoms is None:
    atom_indexes = range(ref_mol.size)
else:
    atom_indexes = list(atom_filter.filter_atoms)
    atom_indexes.sort()
    if atom_indexes[0] < 0 or atom_indexes[-1] >= ref_mol.size:
        parser.error("The indexes in the atom filter are out of range")

# prepare for pca
paths_in = []
for i in atom_indexes:
    tmp = "%s.%07i" % (pos_prefix, i)
    for c in "xyz":
        paths_in.append("%s.%s" % (tmp, c))
dtype = numpy.dtype([("data", float, len(paths_in))])
if options.reference:
    reference = ref_mol.coordinates.ravel()
else:
    reference = None
if options.corr_coeff:
    weights = None
else:
    masses = numpy.array([periodic[ref_mol.numbers[index]].mass for index in atom_indexes])
    weights = numpy.array([masses, masses, masses]).transpose().ravel()

# call the pca script
mean = pca_common_script(
    paths_in, dtype, sub, weights, options.corr_coeff, reference,
    output_prefix, options.num_levels, options.dump_pcs, options.unit, unit
)

# if the reference geometry is not used as 'the' average geometry, write the
# cartesian average geometry to an xyz file
if not options.reference:
    numbers = [ref_mol.numbers[index] for index in atom_indexes]
    mol = Molecule(numbers, mean.reshape((-1,3)))
    mol.write_to_file(fn_average)


