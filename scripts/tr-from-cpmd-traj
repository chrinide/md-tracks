#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks import cpmd_traj_to_tracks, parse_slice, AtomFilter, log
from ccio.psf import PSFFile
from optparse import OptionParser


usage = """Usage: %prog [options] filename [output_directory]
%prog transforms the given CPMD trajectory file into separate tracks.

Each track is associated with one Cartesian coordinate with the name
atom.${middle_word}.${index}.${c} where
 * ${middle_word} is pos or vel, to indicat the kind of data stored in the
   track file (i.e. positions or velocities).
 * ${index} is the atom index, seven characters wide, padded with zeros.
   Counting starts at zero.
 * ${c} is x, y or z.
The tracks are stored in output_directory. If the output_directory
argument is not given, it defaults to 'tracks'.

%prog -h prints out all available options."""

parser = OptionParser(usage)
parser.add_option(
    "-s", "--slice",
    help="subsample the trajectory with the given slice start:stop:step "
         "where start, stop and step must be integers or can be omitted. "
         "The slice interpretation is pythonic. [default=%default]",
    default="::"
)
parser.add_option(
    "-a", "--filter-atoms",
    help="Only consider the atoms listed in FILTER_ATOMS. FILTER_ATOMS is a "
         "comma separated list of of integers. Counting starts at zero.",
    default=None
)
parser.add_option(
    "-q", "--quiet",
    action="store_false", dest="verbose", default=True,
    help="Don't print any output"
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) == 1:
    filename = args[0]
    output_dir = "tracks"
elif len(args) == 2:
    filename, output_dir = args
else:
    parser.error("Expecting one or two arguments.")

sub = parse_slice(options.slice)
atom_filter = AtomFilter(options.filter_atoms)

# first find out how many atoms the system has:
first_index = None
num_atoms = 0
f = file(filename)
for line in f:
    index = int(line.split()[0])
    if first_index is None:
        first_index = index
    elif first_index != index:
        break
    num_atoms += 1
f.close()

cpmd_traj_to_tracks(filename, num_atoms, output_dir, sub, atom_filter.filter_atoms)

