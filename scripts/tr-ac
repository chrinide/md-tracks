#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks import load_track, dump_track, parse_x_step, log
from molmod.units import parse_unit
import numpy
from optparse import OptionParser


usage = """Usage: %prog [options] input1 [input2 ...] {time_axis|time_step} output
%prog computes the auto-correlation function from a set of tracks (input1,
input2, ...) and stores the result in a track ${output}. The normalized auto-
correlation function will be stored in ${output}.normalized. The  last argument
but one is a track that contains the time-axis, or it can also be the time step
between two discrite data points.

%prog -h prints out all available options.
"""

parser = OptionParser(usage)
parser.add_option(
    "-m", "--max-delta-t",
    help="Determines the maximum time-difference for which the auto-"
         "correlation has to be computed. This value defaults to half "
         "the track size. The lower this value, the better "
         "the statistical accuracy of the end result."
)
parser.add_option(
    "-n", "--non-zero-average",
    help="Set this option, if the average of the tracks is nonzero [default=%default]",
    default=False, action="store_true",
)
parser.add_option(
    "-q", "--quiet",
    action="store_false", dest="verbose", default=True,
    help="Don't print any output"
)
parser.add_option(
    "-t", "--tau", default=None,
    help="Give an estimate of the correlation time. If given, an error estimate "
         "of the time correlation function will be computed and stored in "
         "${output}.error and ${output}.normalized.error."
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) >= 3:
    paths_in = args[:-2]
    time_step = parse_x_step(args[-2])
    path_out = args[-1]
else:
    parser.error("Expecting at least two arguments.")

length = len(load_track(paths_in[0]))
if options.max_delta_t is None:
    max_delta_steps = length/2
else:
    max_delta_steps = int(parse_unit(options.max_delta_t)/time_step)
    if max_delta_steps <= 0:
        parser.error("the option max_delta_t must be strictly positive")
average_steps = length - max_delta_steps
agerage_time = average_steps*time_step

result = 0
for path_in in paths_in:
    f = load_track(path_in)
    if len(f) != length:
        raise Error("All input tracks must have the same length.")
    if options.non_zero_average:
        f -= f.mean()
    tmp = numpy.correlate(f, f[:average_steps], 'valid')/agerage_time
    result += tmp
    log("PROCESSED %s" % path_in)

dump_track(path_out, result)
log("WRITTEN %s" % path_out)
dump_track("%s.normalized" % path_out, result/result[0])
log("WRITTEN %s.normalized" % path_out)

if options.tau is not None:
    correlation_time = parse_unit(options.tau)
    ones = numpy.ones(len(result), float)
    normalized_error = 2*numpy.sqrt(correlation_time/agerage_time/len(paths_in))
    error = normalized_error*result[0]
    dump_track("%s.error" % path_out, ones*error)
    dump_track("%s.normalized.error" % path_out, ones*normalized_error)
