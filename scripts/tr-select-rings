#!/usr/bin/env python
# -*- coding: utf-8 -*-
# MD-Tracks is a trajectory analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2012 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
#--


from tracks.log import usage_tail
from tracks.optparse import add_select_options

from molmod.io.psf import PSFFile
from molmod.graphs import GraphSearch, RingPattern

from optparse import OptionParser


usage = """%prog [options] connectivity.psf ring_size

%prog prints out all the ring structures in the psf file, one line per ring
structure. Each line consists of a comma-separated list of atom indexes that
form a ring. The order of the atom indexes correspons to the order of the
atoms in the rings.""" + usage_tail

parser = OptionParser(usage)
add_select_options(parser)
(options, args) = parser.parse_args()


if len(args) == 2:
    path_psf, ring_size = args
    ring_size = int(ring_size)
else:
    parser.error("Expecting two arguments.")


# Initialize the atom and molecule objects:
psf = PSFFile(path_psf)
graph = psf.get_graph()

def print_indexes(indexes):
    if options.prefix is None:
        print ",".join([str(value) for value in indexes])
    else:
        p = options.prefix
        if options.xyz:
            print " ".join("%s.%07i.x %s.%07i.y %s.%07i.z" % (p, i, p, i, p, i) for i in indexes)
        else:
            print " ".join("%s.%07i" % (p, i) for i in indexes)


match_generator = GraphSearch(
    RingPattern(ring_size),
)
for ring_match in match_generator(graph):
    if len(ring_match.forward) == ring_size:
        # ignore smaller rings (larger rings are not in anyway)
        print_indexes(list(atom_index for key, atom_index in sorted(ring_match.forward.items())))


