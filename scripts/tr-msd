#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --

from tracks.core import load_track, dump_track
from tracks.parse import parse_slice
from tracks.optparse import add_quiet_option, add_slice_option
from tracks.log import log, usage_tail

import numpy
from optparse import OptionParser

usage = """%prog [options] input1 [input2 ...] output

%prog computes the (isotropic) square displacement of the given inputs, as a
function of delta t. The output can be used to derive the diffusion coefficient.
""" + usage_tail

parser = OptionParser(usage)
add_quiet_option(parser)
add_slice_option(parser)
parser.add_option(
    "--delta-origin", default="1",
    help="The spacing between subsequent origins in the algorithm [default=%default]",
)
(options, args) = parser.parse_args()

log.verbose = options.verbose
if len(args) >= 2:
    paths_in = args[:-1]
    path_out = args[-1]
else:
    parser.error("Expecting at least two arguments.")

sub = parse_slice(options.slice)
delta_origin = int(options.delta_origin)

max_steps = None
for path_in in paths_in:
    print "PROCESSING", path_in
    inp = load_track(path_in, sub)
    if max_steps is None:
        max_steps = len(inp)-1
        result = numpy.zeros(max_steps, float)
        counts = numpy.zeros(max_steps, int)

    for origin in xrange(0, len(inp)-1,delta_origin):
        size = len(inp)-origin-1
        result[:size] += (inp[origin] - inp[origin+1:])**2
        counts[:size] += 1

result /= counts
dump_track(path_out, result)


