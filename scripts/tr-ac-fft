#!/usr/bin/env python
# -*- coding: utf-8 -*-
# MD-Tracks is a trajectory analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2012 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
#--



from tracks.core import load_track, dump_track
from tracks.parse import parse_x_step
from tracks.optparse import add_quiet_option, add_cor_time_unit, \
    add_zero_mean_option, add_blocks_option
from tracks.log import log, usage_tail
from tracks.api import SpectrumProcessor, fit_cor_time

from molmod.units import parse_unit

import numpy

from optparse import OptionParser


usage = """%prog input1 [input2 ...] {time_axis|time_step} output_prefix

%prog computes the average auto-correlation function for a set of tracks
(${input1}, ${input2}, ...) and stores the result in a track ${output}.
The normalized auto- correlation function will be stored in
${output}.normalized. The next-to-last argument is a track that contains the
time-axis, or it can also be the time step between two discrete data points.

This implementation uses the fast Fourier transform algorithm. If you prefer
autocorrelation functions that are not computed with the FFT method, see tr-ac.

A simple exponential model is fitted to the normalized autocorrelation function
to estimated the correlation time. The fitted parameter is printed on screen.
""" + usage_tail

parser = OptionParser(usage)
add_zero_mean_option(parser)
add_quiet_option(parser)
add_blocks_option(parser)
add_cor_time_unit(parser)
(options, args) = parser.parse_args()

if len(args) >= 3:
    paths_in = args[:-2]
    time_step = parse_x_step(args[-2])
    output_prefix = args[-1]
else:
    parser.error("Expecting at least three arguments.")

num_blocks = int(options.blocks)
time_unit = parse_unit(options.time_unit)

# generate the spectrum
sp = SpectrumProcessor(time_step, num_blocks)
for path_in in paths_in:
    log("PROCESSING %s" % path_in)
    f = load_track(path_in)
    if not options.zero_mean:
        f = f - f.mean()
    sp.process(f)
freq_res, wave_res, amp, amp_err = sp.get_results()

ac = numpy.fft.irfft(amp)
dump_track("%s.ac" % output_prefix, ac)
log("WRITTEN %s.ac" % output_prefix)
ac /= ac[0]
dump_track("%s.ac.normalized" % output_prefix, ac)
log("WRITTEN %s.ac.normalized" % output_prefix)

cor_time = fit_cor_time(time_step, ac)
log("Correlation time [%s]: %.3f" % (options.time_unit, cor_time/time_unit))


