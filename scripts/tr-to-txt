#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2009 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import MultiTracksReader
from tracks.parse import parse_slice
from tracks.optparse import add_quiet_option, add_slice_option
from tracks.log import log, usage_tail

from molmod.units import parse_unit

import numpy
from optparse import OptionParser


usage = """%prog [options] [unit1] input1 [[unit2] input2 ...]

%prog prints the contents of the tracks ${input*} to stdout, one column per
input track, one row per time step. The values are tab separated. Optionally
each input track can be prepended with a unit that will be used to write the
data on screen. (The tracks store the data in atomic units.) The first unit
defaults to au. If an input has no unit defined, the unit for the previous
input is used.
""" + usage_tail

parser = OptionParser(usage)
add_slice_option(parser)
add_quiet_option(parser)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) >= 1:
    units = []
    paths_in = []
    for arg in args:
        try:
            units.append(parse_unit(arg))
            if len(units) > len(paths_in)+1:
                parser.error("Two subsequent units found without an input track in between.")
        except ValueError:
            paths_in.append(arg)
            if len(units) < len(paths_in):
                if len(units) == 0:
                    units.append(1)
                else:
                    units.append(units[-1])
    if len(units) > len(paths_in):
        parser.error("The arguments list ends with a unit.")
else:
    parser.error("Expecting at least one argument.")

sub = parse_slice(options.slice)
dtype = numpy.dtype([("data", float, (len(paths_in),))])
mtr = MultiTracksReader(paths_in, dtype, sub=sub)
for row in mtr:
    print "\t".join(str(value/unit) for value, unit in zip(row["data"], units))


