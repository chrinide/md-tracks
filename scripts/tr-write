#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import MultiTracksWriter
from tracks.parse import parse_slice
from tracks.log import log
from molmod.units import parse_unit

import numpy, sys, itertools
from optparse import OptionParser


usage = """%prog [options] [unit1] output1 [[unit2] output2 ...]

%prog stores the data from stdin in the tracks ${output*}. The data on stdin
must be formatted as follows: one line contains all data that belong to one
time step. On each line the values are white-space separated. Optionally, each
output* argument can be prepended with a unit. %prog will interpret the data on
stdin using the these units. The data in the tracks are always stored in
atomic units. unit1 defaults to au. The other unit arguments default to the unit
of the previous input. Instead of a track filename, one can also give a bare
minus sign as argument, indicating that the corresponding column on the stdin
has to be ignored.

%prog -h prints out all available options."""

parser = OptionParser(usage)
parser.add_option(
    "-s", "--slice", default="::",
    help="Subsample the standard input with the given slice start:stop:step "
         "where start, stop and step must be integers or can be omitted. "
         "The slice interpretation is pythonic. [default=%default]",
)
parser.add_option(
    "-q", "--quiet", action="store_false", dest="verbose", default=True,
    help="Don't print any output."
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) >= 1:
    units = []
    paths_out = []
    for arg in args:
        try:
            units.append(parse_unit(arg))
            if len(units) > len(paths_out)+1:
                parser.error("Two subsequent units found without an input track in between.")
        except ValueError:
            paths_out.append(arg)
            if len(units) < len(paths_out):
                if len(units) == 0:
                    units.append(1)
                else:
                    units.append(units[-1])
    if len(units) > len(paths_out):
        parser.error("The arguments list ends with a unit.")
else:
    parser.error("Expecting at least one argument.")

columns = [index for index, path_out in enumerate(paths_out) if path_out != '-']
paths_out = [path_out for path_out in paths_out if path_out != '-']

sub = parse_slice(options.slice)
units = numpy.array(units)[columns]
mtw = MultiTracksWriter(paths_out)
for line in itertools.islice(sys.stdin, sub.start, sub.stop, sub.step):
    words = line.split()
    row = numpy.array(list(float(words[index]) for index in columns))
    mtw.dump_row(row*units)
mtw.finalize()
