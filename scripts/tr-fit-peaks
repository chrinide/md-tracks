#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2009 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track, dump_track
from tracks.optparse import add_quiet_option
from tracks.log import log, usage_tail
from tracks.fit import PeakModel, FitCostFunction

from molmod.units import parse_unit

import numpy, sys
from optparse import OptionParser


usage = """%prog [options] wavenumbers amplitudes minwn maxwn initial_parameters

%prog fits a model to a given spectrum.

The mandatory arguments are the following:
  wavenumbers -- the track with the wavenumbers
  amplitudes -- the amplitudes of the vibrational spectrum
  minwn -- the beginning of the fitting window
  maxwn -- the end of the fitting window
  initial_parameters -- The initial model parameters: b:lc_0:sigma_0:A_0[:lc_1:sigma_1:A_1:...]

The model has the following analytical form:

amplitude(l) = b + sum_i A_i*exp(-((l-lc_i)/sigma_i)**2)
""" + usage_tail

parser = OptionParser(usage)
parser.add_option(
    "--no-fit", default=True, action="store_false", dest="fit",
    help="Do not optimize the parameters.",
)
parser.add_option(
    "--dump-model", dest="model_path",
    help="Dump the aplitudes track from the optimized model to MODEL_PATH.",
)
parser.add_option(
    "--xunit", default='1/cm',
    help="The unit for the x-data. [default=%default]",
)
parser.add_option(
    "--yunit", default='au',
    help="The unit for the y-data. [default=%default]",
)
add_quiet_option(parser)
(options, args) = parser.parse_args()


xunit = parse_unit(options.xunit)
yunit = parse_unit(options.yunit)

log.verbose = options.verbose
if len(args) == 5:
    path_wavenumbers, path_amplitudes, minfreq, maxfreq, initps = args
    minfreq = float(minfreq)
    maxfreq = float(maxfreq)
    initial_parameters = numpy.array([float(word) for word in initps.split(":")])
else:
    parser.error("Expecting five arguments")

# manipulate the training data
all_wavenumbers = load_track(path_wavenumbers)/xunit
all_amplitudes = load_track(path_amplitudes)/yunit
begin,end = all_wavenumbers.searchsorted([minfreq, maxfreq])
wavenumbers = all_wavenumbers[begin:end]
amplitudes = all_amplitudes[begin:end]

# create the model
peak_model = PeakModel(initial_parameters)

# create the cost function
cost_function = FitCostFunction(wavenumbers, amplitudes, peak_model)

from scipy.optimize import fmin_bfgs

log("data range: %i:%i" % (begin,end))
log("    cost      cond   | %s" % " ".join("%s" % label.center(10) for label in peak_model.get_labels()))
def log_iteration(current_parameters):
    cost = cost_function(current_parameters)
    hessian = cost_function.hessian(current_parameters)
    evals, evecs = numpy.linalg.eigh(hessian)
    cond = abs(evals).min()/abs(evals).max()
    log(" %1.3e %1.3e | %s" % (cost, cond, " ".join("%10f" % p for p in current_parameters)))
    cond_threshold = 1e-5
    for evl, evc in zip(evals, evecs):
        cond = abs(evl)/abs(evals).max()
        if cond < cond_threshold:
            log("  cond=%1.5e   #" % cond, "_".join("%10f" % value for value in evc))
    sys.stdout.flush()

ranges = tuple((val*0.9, val*1.1) for val in initial_parameters)
if options.fit:
    opt_parameters = fmin_bfgs(cost_function, initial_parameters, cost_function.gradient, disp=1, callback=log_iteration)
else:
    opt_parameters = initial_parameters
    log_iteration(opt_parameters)

if options.model_path is not None:
    model_output = peak_model(all_wavenumbers)
    dump_track(options.model_path, model_output*yunit)


