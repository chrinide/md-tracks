#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import dump_track
from tracks.parse import parse_slice
from tracks.optparse import add_quiet_option, add_slice_option, \
    add_cell_option, add_ic_project_option
from tracks.log import log, usage_tail
import tracks.api.vector as vector
import tracks.api.cell as cell

from optparse import OptionParser
import os


usage = """%prog [options] pos_prefix1 pos_prefix2 [vel_prefix1 vel_prefix2] pos_output [vel_output]

%prog computes the distance between the atom ${pos_prefix1} and ${pos_prefix2}
for all time steps. Tracks with the given prefixes must exist, and their
filenames must look like: ${pos_prefix*}.c where c is x, y or z. The output is
stored in ${pos_output}.

If the arguments ${vel_prefix*} are given, also the time derivative of the
distance is computed.  Tracks with the given prefixes must exist, and their
filenames must look like: ${vel_prefix*}.c where c is x, y or z. The output is
stored in ${vel_output}.
""" + usage_tail

parser = OptionParser(usage)
add_slice_option(parser)
add_quiet_option(parser)
add_cell_option(parser)
add_ic_project_option(parser, "the distance")
(options, args) = parser.parse_args()

log.verbose = options.verbose
if len(args) == 3:
    pos_prefix1, pos_prefix2, pos_output_path = args
    vel_prefix1 = None
    vel_prefix2 = None
    vel_output_path = None
elif len(args) == 6:
    pos_prefix1, pos_prefix2, vel_prefix1, vel_prefix2, pos_output_path, vel_output_path = args
else:
    parser.error("Expecting three or six arguments.")

sub = parse_slice(options.slice)

if options.unit_cell_str is None:
    track_cell = None
else:
    track_cell = cell.TrackCell.from_cell_str(options.unit_cell_str, sub)

if vel_output_path is None:
    dump_track(pos_output_path, vector.dist(
        vector.TrackVector.from_prefix(pos_prefix1, sub),
        vector.TrackVector.from_prefix(pos_prefix2, sub),
        track_cell=track_cell,
    ))
    log("WRITTEN: %s" % pos_output_path)
else:
    result = vector.dist(
        vector.TrackVector.from_prefix(pos_prefix1, sub),
        vector.TrackVector.from_prefix(pos_prefix2, sub),
        vector.TrackVector.from_prefix(vel_prefix1, sub),
        vector.TrackVector.from_prefix(vel_prefix2, sub),
        track_cell=track_cell, project=options.project
    )

    if options.project:
        dist_pos, dist_vel, proj_vel, foo = result
    else:
        dist_pos, dist_vel = result

    dump_track(pos_output_path, dist_pos)
    log("WRITTEN: %s" % pos_output_path)
    dump_track(vel_output_path, dist_vel)
    log("WRITTEN: %s" % vel_output_path)
    if options.project:
        for i, vel_prefix in enumerate([vel_prefix1,vel_prefix2]):
            for j, c in enumerate('xyz'):
                filename = "%s.%s.proj.%s" % (vel_prefix, c, os.path.basename(vel_output_path))
                dump_track(filename, proj_vel[i].data[j])
                log("WRITTEN: %s" % filename)


