#!/usr/bin/env python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.convert import xyz_to_tracks
from tracks.parse import parse_slice
from tracks.optparse import add_quiet_option, add_slice_option, \
    add_append_option, add_filter_atoms_option
from tracks.util import AtomFilter
from tracks.log import log, usage_tail

from molmod.units import parse_unit

from optparse import OptionParser


usage = """%prog [options] filename middle_word [output_directory]

%prog transforms the given XYZ trajectory file into separate tracks.

Each track is associated with one Cartesian coordinate with the name
atom.${middle_word}.${index}.${c} where
 * ${middle_word} is defined by the second argument. Use 'pos' when the xyz file
   contains atomic positions. Use 'vel' when the xyz file contains atomic
   velocities. Other scripts rely on this convention.
 * ${index} is the atom index, seven characters wide, padded with zeros.
   Counting starts at zero.
 * ${c} is x, y or z.
The tracks are stored in atomic units in the ${output_directory}. If the
${output_directory} argument is not given, it defaults to 'tracks'.
""" + usage_tail

parser = OptionParser(usage)
add_slice_option(parser)
add_quiet_option(parser)
add_append_option(parser)
add_filter_atoms_option(parser)
parser.add_option(
    "-u", "--unit", default="angstrom",
    help="The unit in which the data in the xyz file are given. [default=%default]",
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) == 2:
    filename, middle_word = args
    output_dir = "tracks"
elif len(args) == 3:
    filename, middle_word, output_dir = args
else:
    parser.error("Expecting two or three arguments.")

file_unit = parse_unit(options.unit)
sub = parse_slice(options.slice)
atom_filter = AtomFilter(options.filter_atoms)

xyz_to_tracks(filename, middle_word, output_dir, sub, file_unit, atom_filter.filter_atoms, clear=options.clear)


