#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track
from tracks.parse import parse_slice
from tracks.optparse import add_slice_option
from tracks.log import usage_tail

from molmod.units import parse_unit

import numpy, sys, pylab
from optparse import OptionParser


# A) Specify the parameters and the usage

global_usage = """%prog [global_options] plot0 [plot1 ...] image

%prog is a generic plotting script that plots data from multiple tracks. The
global options must precede the line specifications. The figure is saved to the
file ${image}, which must always be the last argument. A plot specification has
the following structure:

 :kind [options] data

where ${kind} is 'line', 'bar', 'vline', 'hline' or 'contour'. A plot
specification must start with a colon, i.e. ':'. The available options and the
number of data arguments depend on the kind of plot. Use --plot-help for more
details.
""" + usage_tail

global_parser = OptionParser(global_usage)
global_parser.add_option(
    "--plot-help",
    help="Print more information about the plot specifications.",
    default=False, action="store_true",
)
global_parser.add_option(
    "-t", "--title", default="",
    help="The plot title. [default=%default]",
)
global_parser.add_option(
    "-x", "--xlabel", default="X",
    help="The plot xlabel. [default=%default]",
)
global_parser.add_option(
    "-y", "--ylabel", default="Y",
    help="The plot ylabel. [default=%default]",
)
global_parser.add_option(
    "--xlog", default=False, action="store_true",
    help="This option activates a logarithmic scale for the x-axis.",
)
global_parser.add_option(
    "--ylog", default=False, action="store_true",
    help="This option activates a logarithmic scale for the y-axis.",
)
global_parser.add_option(
    "--xinv",
    help="Use the inverse values as labels on the x-axis.",
    default=False, action="store_true",
)
global_parser.add_option(
    "--yinv", default=False, action="store_true",
    help="Use the inverse values as labels on the x-axis.",
)
global_parser.add_option(
    "--xunit", default='au',
    help="The unit for the x-axis. [default=%default]",
)
global_parser.add_option(
    "--yunit", default='au',
    help="The unit for the y-axis. [default=%default]",
)
global_parser.add_option(
    "--xlim", default=",",
    help="The range for the x-axis. (One has to supply units like 8*A.) "
         "Format: [min],[max]. If min and/or max are omitted, they are set "
         "automatically. [default=%default]",
)
global_parser.add_option(
    "--ylim", default=",",
    help="The range for the y-axis. (One has to supply units like 8*A.) "
         "Format: [min],[max]. If min and/or max are omitted, they are set "
         "automatically. [default=%default]",
)
global_parser.add_option(
    "--no-legend", action="store_false", dest="legend", default=True,
    help="Hide the legend.",
)
global_parser.add_option(
    "--no-grid", action="store_false", dest="grid", default=True,
    help="Hide the grid.",
)


# preB) Generic parse options

def add_color_option(parser):
    parser.add_option(
        "-c", "--color",
        help="Specifiy the color for this line",
    )

def add_label_option(parser):
    parser.add_option(
        "-l", "--label",
        help="Specifiy a label for this line",
    )

def add_line_style_option(parser):
    parser.add_option(
        "-d", dest="linestyle", default="-",
        help="Specify the line style: '-', '--', ':', ... (see matplotlib.sf.net)",
    )

def add_line_width_option(parser):
    parser.add_option(
        "-w", dest="linewidth", default="1",
        help="Specify the line width in points",
    )

def add_alpha_option(parser):
    parser.add_option(
        "-a", dest="alpha", default="1",
        help="Specify the opacity (alpha channel). 0 is transparent, 1 is opaque.",
    )


# B) Define the plot descriptors

class Error(Exception):
    pass


class PlotDescriptor(object):
    kinds = {}

    def __new__(type, args):
        result = object.__new__(type, args)
        cls = PlotDescriptor.kinds.get(args[0].lower()[1:])
        if cls is None:
            raise Error("line type '%s' not recognized." % args[0])
        else:
            result.__class__ = cls
        return result

    def __init__(self, args):
        self.options, self.args = self.parser.parse_args(args[1:])

    def init_line_data(self, xunit, yunit):
        sub = parse_slice(self.options.slice)
        if len(self.args) == 1:
            self.y = load_track(self.args[0], sub)
            self.x = None
            self.error = None
            label = self.args[0]
        elif len(self.args) == 2:
            if len(self.args[0]) == 0:
                self.x = None
            else:
                self.x = load_track(self.args[0], sub)
            self.y = load_track(self.args[1], sub)
            self.error = None
            label = self.args[1]
        elif len(self.args) == 3:
            if len(self.args[0]) == 0:
                self.x = None
            else:
                self.x = load_track(self.args[0], sub)
            self.y = load_track(self.args[1], sub)
            if len(self.args[2]) == 0:
                self.error = None
            else:
                self.error = load_track(self.args[2], sub)
            label = self.args[1]
        else:
            self.parser.error("A line description should at most contain three tracks. Got:\n%s" % " ".join(self.args))
        if self.x is None:
            stop = min(sub.stop, sub.start + len(self.y)*sub.step)
            print sub.start, stop, sub.step
            self.x = numpy.arange(sub.start, stop, sub.step, dtype=float)
        elif len(self.x) > len(self.y): # allow the x-axis to contain more data
            self.x = self.x[:len(self.y)]
        self.x = self.x/xunit
        self.y = self.y/yunit
        if self.error is not None: self.error = self.error/yunit
        if self.options.label is None:
            self.options.label = label


line_usage = """Data arguments: {y|x y [e]}
- x is the track with the x-data
- y is the track with the y-data
- e is the track with the error on the y-data.
If the track x contains more data than y, only the x[:len(y)] will be used for
plotting.
"""
class LineDescriptor(PlotDescriptor):
    parser = OptionParser(line_usage)
    add_color_option(parser)
    add_line_style_option(parser)
    add_line_width_option(parser)
    add_alpha_option(parser)
    add_label_option(parser)
    add_slice_option(parser)

    def plot(self, xunit, yunit):
        self.init_line_data(xunit, yunit)
        kwargs = {}
        if self.options.color is not None: kwargs["color"] = self.options.color
        if self.options.linestyle is not None: kwargs["linestyle"] = self.options.linestyle
        kwargs["linewidth"] = float(self.options.linewidth)
        kwargs["alpha"] = float(self.options.alpha)
        self.patch = pylab.plot(self.x, self.y, **kwargs)[0]
        if self.error is not None:
            kwargs["color"] = self.patch.get_color()
            kwargs["alpha"] = 0.5*kwargs["alpha"]
            pylab.plot(self.x, self.y+self.error, label="_nolegend_", **kwargs)
            pylab.plot(self.x, self.y-self.error, label="_nolegend_", **kwargs)

PlotDescriptor.kinds["line"] = LineDescriptor


scatter_usage = """Data arguments: x y
- x is the track with the x-data
- y is the track with the y-data
If the track x contains more data than y, only the x[:len(y)] will be used for
plotting.
"""
class ScatterDescriptor(PlotDescriptor):
    parser = OptionParser(scatter_usage)
    add_color_option(parser)
    parser.add_option(
        "-e", "--edge-color",
        help="Specifiy the marker edge color for this scatter",
    )
    add_alpha_option(parser)
    add_label_option(parser)
    add_slice_option(parser)
    parser.add_option(
        "-m", dest="marker",
        help="Specify the symbol that is used for the data points in the "
             "scatter plot. Possible options: o, ^, v, <, >, s, +, x, D, d, 1, "
             "2, 3, 4, h, H, p, |, _. Some markers might require propper "
             "quoting.",
    )

    def init_scatter_data(self, xunit, yunit):
        sub = parse_slice(self.options.slice)
        if len(self.args) == 2:
            self.x = load_track(self.args[0], sub)
            self.y = load_track(self.args[1], sub)
            label = "%s vs. %s" % (self.args[0], self.args[1])
        else:
            self.parser.error("A scatter description must contain two tracks. Got:\n%s" % " ".join(self.args))
        if len(self.x) > len(self.y): # allow the x-axis to contain more data
            self.x = self.x[:len(self.y)]
        self.x = self.x/xunit
        self.y = self.y/yunit
        if self.options.label is None:
            self.options.label = label

    def plot(self, xunit, yunit):
        self.init_scatter_data(xunit, yunit)
        kwargs = {}
        kwargs['marker'] = 'o'
        if self.options.color is not None: kwargs["color"] = self.options.color
        if self.options.edge_color is not None: kwargs["markeredgecolor"] = self.options.edge_color
        if self.options.marker is not None: kwargs["marker"] = self.options.marker
        kwargs["alpha"] = float(self.options.alpha)
        self.patch = pylab.plot(self.x, self.y, linestyle='None', **kwargs)[0]
PlotDescriptor.kinds["scatter"] = ScatterDescriptor


class BarDescriptor(PlotDescriptor):
    parser = OptionParser(line_usage)
    add_color_option(parser)
    add_line_width_option(parser)
    add_alpha_option(parser)
    add_label_option(parser)
    add_slice_option(parser)

    def plot(self, xunit, yunit):
        self.init_line_data(xunit, yunit)
        fraction = 1.0
        delta = self.x[1:] - self.x[:-1]
        left = numpy.zeros(len(self.x), float)
        left[1:] = self.x[1:] - 0.5*fraction*delta
        left[0] = self.x[0] - 0.5*fraction*delta[0]
        right = numpy.zeros(len(self.x), float)
        right[:-1] = self.x[:-1] + 0.5*fraction*delta
        right[-1] = self.x[-1] + 0.5*fraction*delta[-1]
        width = right-left

        points_x = []
        points_y = []
        for index in xrange(len(self.y)):
            points_x.append(left[index])
            points_y.append(self.y[index])
            points_x.append(right[index])
            points_y.append(self.y[index])
        kwargs = {}
        if self.options.color is not None: kwargs["color"] = self.options.color
        kwargs["linewidth"] = float(self.options.linewidth)
        kwargs["alpha"] = float(self.options.alpha)
        self.patch = pylab.plot(points_x, points_y, **kwargs)[0]
        self.options.color = self.patch.get_color()
        if self.error is not None:
            alpha = kwargs["alpha"]*0.5
            linewidth = kwargs["linewidth"]
            from matplotlib.patches import Polygon
            fraction = 0.5
            left[1:] = self.x[1:] - 0.5*fraction*delta
            left[0] = self.x[0] - 0.5*fraction*delta[0]
            right[:-1] = self.x[:-1] + 0.5*fraction*delta
            right[-1] = self.x[-1] + 0.5*fraction*delta[-1]
            for l, r, x, y, e in zip(left, right, self.x, self.y, self.error):
                pylab.gca().add_patch(Polygon([(l, y+e),(r,y+e)], ec=self.options.color, alpha=alpha, linewidth=linewidth, fill=False))
                pylab.gca().add_patch(Polygon([(l, y-e),(r,y-e)], ec=self.options.color, alpha=alpha, linewidth=linewidth, fill=False))
                pylab.gca().add_patch(Polygon([(x, y-e),(x,y+e)], ec=self.options.color, alpha=alpha, linewidth=linewidth, fill=False))
        pylab.gca().autoscale_view()

PlotDescriptor.kinds["bar"] = BarDescriptor


straigt_line_usage = """The data argument is a series of values for the position of the lines.

The unit must be included, e.g. 3*A.
"""
class StraightHLineDescriptor(PlotDescriptor):
    parser = OptionParser(straigt_line_usage)
    add_color_option(parser)
    add_line_style_option(parser)
    add_line_width_option(parser)
    add_alpha_option(parser)
    add_label_option(parser)
    parser.add_option(
        "--min", default="0",
        help="Specify the fractional position in the axes where the line starts.",
    )
    parser.add_option(
        "--max", default="1",
        help="Specify the fractional position in the axes where the line ends.",
    )
    kind = None

    def __init__(self, args):
        PlotDescriptor.__init__(self, args)
        if len(self.args) == 0:
            self.parser.error("Expecting at least one argument in the %s specification" % self.kind)
        else:
            self.values = [parse_unit(arg) for arg in self.args]


class HLineDescriptor(StraightHLineDescriptor):
    kind = "hline"

    def plot(self, xunit, yunit):
        kwargs = {}
        if self.options.color is not None: kwargs["color"] = self.options.color
        if self.options.linestyle is not None: kwargs["linestyle"] = self.options.linestyle
        kwargs["linewidth"] = float(self.options.linewidth)
        kwargs["alpha"] = float(self.options.alpha)
        kwargs["xmin"] = float(self.options.min)
        kwargs["xmax"] = float(self.options.max)
        for value in self.values:
           self.patch = pylab.axhline(value/yunit, **kwargs)

PlotDescriptor.kinds["hline"] = HLineDescriptor


class VLineDescriptor(StraightHLineDescriptor):
    kind = "vline"

    def plot(self, xunit, yunit):
        kwargs = {}
        if self.options.color is not None: kwargs["color"] = self.options.color
        if self.options.linestyle is not None: kwargs["linestyle"] = self.options.linestyle
        kwargs["linewidth"] = float(self.options.linewidth)
        kwargs["alpha"] = float(self.options.alpha)
        kwargs["ymin"] = float(self.options.min)
        kwargs["ymax"] = float(self.options.max)
        for value in self.values:
            self.patch = pylab.axvline(value/xunit, **kwargs)

PlotDescriptor.kinds["vline"] = VLineDescriptor


contour_usage = """Data arguments: X Y Z1 [Z2 ..]"""
class ContourDescriptor(PlotDescriptor):
    parser = OptionParser(contour_usage)
    parser.add_option(
        "-n", dest="num_levels", default=10,
        help="Specify the number of contour levels.",
    )
    parser.add_option(
        "-f", dest="filled", default=False, action="store_true",
        help="Make a filled contour plot.",
    )
    parser.add_option(
        "--zlog", default=False, action="store_true",
        help="Plot log(abs(z)) instead of z",
    )
    parser.add_option(
        "--zmin", default=None,
        help="The lower boundary for the color scale",
    )
    parser.add_option(
        "--zmax", default=None,
        help="The upper boundary for the color scale",
    )
    parser.add_option(
        "--zunit", default='au',
        help="The unit for the z-axis. [default=%default]",
    )
    add_slice_option(parser)

    def __init__(self, args):
        PlotDescriptor.__init__(self, args)
        if len(self.args) < 3:
            self.parser.error("Excpecting at least three data arguments. Got %i" % len(self.args))
        self.sub = parse_slice(self.options.slice)
        self.x = load_track(self.args[0], self.sub)
        self.y = load_track(self.args[1])
        self.paths_z = self.args[2:]
        self.options.label = None

    def plot(self, xunit, yunit):
        z = numpy.zeros((len(self.y), len(self.x)), float)
        for index, path_z in enumerate(self.paths_z):
            z[index] = load_track(path_z, self.sub)
        if self.options.zlog:
            z = numpy.log(abs(z))
        if self.options.zmin is None:
            self.options.zmin = z.min()
        else:
            self.options.zmin = parse_unit(self.options.zmin)
        if self.options.zmax is None:
            self.options.zmax = z.max()
        else:
            self.options.zmax = parse_unit(self.options.zmax)

        z_unit = parse_unit(self.options.zunit)
        z /= z_unit
        self.options.zmin /= z_unit
        self.options.zmax /= z_unit

        num_levels = int(self.options.num_levels)
        levels = numpy.arange(0,num_levels,1,float)/(num_levels-1)*(self.options.zmax-self.options.zmin)+self.options.zmin
        if self.options.filled:
            pylab.contour(self.x/xunit,self.y/yunit,z,levels) # avoid white lines between the filled regions
            pylab.contourf(self.x/xunit,self.y/yunit,z,levels)
        else:
            pylab.contour(self.x/xunit,self.y/yunit,z,levels)
        pylab.colorbar()

PlotDescriptor.kinds["contour"] = ContourDescriptor


# C) parse the arguments
blocks = [[]]
for word in sys.argv[1:]:
    if word[0] == ":" and word[1:] in PlotDescriptor.kinds:
        blocks.append([word])
    else:
        blocks[-1].append(word)


(global_options, global_args) = global_parser.parse_args(blocks[0])
if global_options.plot_help:
    global_parser.print_usage()
    print
    print "Plot specifications"
    print "==================="
    print
    for name, cls in sorted(PlotDescriptor.kinds.iteritems()):
        print name
        print "-"*len(name)
        cls.parser.print_help()
    sys.exit(0)
if len(global_args) > 0:
    global_parser.error("Expecting no global arguments. Got %s" % global_args)
if len(blocks) == 1:
    global_parser.error("No plotting arguments given.")

image = blocks[-1][-1]
del blocks[-1][-1]

# D) parse stuff:
xunit = parse_unit(global_options.xunit)
if global_options.xinv: xunit = 1/xunit
yunit = parse_unit(global_options.yunit)
if global_options.yinv: yunit = 1/yunit

def parse_lim(s, unit):
    if s.count(",") != 1:
        raise ValueError("The value of the option xlim and ylim must contain exactly one ','.")
    mi,ma = s.split(',')
    if len(mi) == 0:
        mi = None
    else:
        mi = parse_unit(mi)/unit
    if len(ma) == 0:
        ma = None
    else:
        ma = parse_unit(ma)/unit
    return mi, ma


# E) The actual plotting
from matplotlib.ticker import ScalarFormatter
class InvScalarFormatter(ScalarFormatter):
    def __call__(self, x, pos):
        return ScalarFormatter.__call__(self, 1/x, pos)

pylab.clf()
pylab.title(global_options.title)
if global_options.xunit == "1":
    pylab.xlabel(global_options.xlabel)
else:
    pylab.xlabel("%s [%s]" % (global_options.xlabel, global_options.xunit))
if global_options.yunit == "1":
    pylab.ylabel(global_options.ylabel)
else:
    pylab.ylabel("%s [%s]" % (global_options.ylabel, global_options.yunit))

patches = []
labels = []
if global_options.grid:
    pylab.grid(True,linestyle="-",linewidth=0.2, alpha=0.5)
    pylab.gca().set_axisbelow(True)
for line_block in blocks[1:]:
    dd = PlotDescriptor(line_block)
    dd.plot(xunit, yunit)
    if dd.options.label is not None:
        patches.append(dd.patch)
        labels.append(dd.options.label)
    del dd
if global_options.xlog:
    pylab.gca().set_xscale("log")
if global_options.ylog:
    pylab.gca().set_yscale("log")
if global_options.xinv:
    pylab.gca().get_xaxis().set_major_formatter(InvScalarFormatter())
if global_options.yinv:
    pylab.gca().get_yaxis().set_major_formatter(InvScalarFormatter())
pylab.xlim(parse_lim(global_options.xlim, xunit))
pylab.ylim(parse_lim(global_options.ylim, yunit))
if global_options.legend and len(labels) > 0:
    pylab.legend(patches, labels, loc=0)
pylab.savefig(image)


