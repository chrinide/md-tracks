#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2009 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import dump_track, TrackNotFoundError
from tracks.parse import parse_slice
from tracks.optparse import add_quiet_option, add_slice_option, \
    add_cell_option, add_cos_option
from tracks.util import AtomFilter
from tracks.log import log, usage_tail
import tracks.api.vector as vector
import tracks.api.cell as cell

from molmod.io.psf import PSFFile

import os
from optparse import OptionParser


usage = """%prog [options] kind pos_prefix [vel_prefix] [atoms1 atoms2 [atoms3 [atoms4]]] connectivity.psf

%prog computes all the internal coordinates of the given ${kind} for the
Cartesian tracks with the given ${pos_prefix}. ${kind} can be one of 'bond',
'bend', 'span', 'dihed', 'dtl' or 'oop'. The cartesian tracks are supposed to
have the following filenames: ${pos_prefix}.${index}.${c}, where ${index} is
the atom index padded with zeros up to 7 characters and ${c} is x, y or z.

The different kinds are interpreted as:
bond:  Bond length atom1-atom2
bend:  Bending angle atom1-atom2-atom3
span:  Distance over a bending angle atom1(-atom2-)atom3
dihed: Dihedral angle atom1-atom2-atom3-atom4
dtl:   Distance to line (atom1-atom2)-atom3
oop:   Out of plane distance (atom1-atom2-atom3)-atom4

The list of internal coordinates is taken from the file ${connectivity.psf}.
Optionally one can reduce the set of internal coordinates with the ${atoms*}
arguments. Each ${atoms*} argument is a comma-separated list of atom
indexes. For example, when '${atoms1}=0,5,3', only the internal coordinates
are considered where atom1 from the previous section belongs to this list. All
or none atom filters must be given. The empty filter argument, i.e. '', is
equivalent to a list containing all atom indexes.

If the argument ${vel_prefix} is given, also the time derivatives of the
internal coordinates are computed. Tracks with the given prefix must exist, and
their filenames must look like: ${vel_prefix*}.${index}.${c}.

The output is written to files that all have the same ${prefix}. If only
${pos_prefix} is given, ${prefix}=${pos_prefix}, but if present, the trailing
'.pos' is removed. If both ${pos_prefix} and ${vel_prefix} are given, the common
part of both is used as output ${prefix}. Trailing dots are always removed from
the ${prefix}.

The output_files have the following structure:
${prefix}.${kind}.pos.${index1}.${index2}
${prefix}.${kind}.pos.${index1}.${index2}.${index3}
${prefix}.${kind}.pos.${index1}.${index2}.${index3}.${index4}
and optionally:
${prefix}.${kind}.vel.${index1}.${index2}
${prefix}.${kind}.vel.${index1}.${index2}.${index3}
${prefix}.${kind}.vel.${index1}.${index2}.${index3}.${index4}
""" + usage_tail

parser = OptionParser(usage)
add_slice_option(parser)
add_quiet_option(parser)
add_cell_option(parser)
add_cos_option(parser)
parser.add_option(
    "-o", "--output-prefix",
    help="Use this prefix for the output files, if not given the prefix of the "
         "Cartesian coordinate tracks is used.",
)
(options, args) = parser.parse_args()


kind_num_filters = {
    'bond': 2,
    'bend': 3,
    'span': 3,
    'dihed': 4,
    'dtl': 3,
    'oop': 4,
}


log.verbose = options.verbose
if len(args) >= 3:
    kind = args[0].lower()
    num_filters = kind_num_filters.get(kind)
    if num_filters is None:
        parser.error("Unknwon kind: %s" % kind)
    pos_prefix = args[1]
    if len(args) == 4 or len(args) == 4+num_filters:
        vel_prefix = args[2]
        filter_args = args[3:-1]
    else:
        vel_prefix = None
        filter_args = args[2:-1]
    path_psf = args[-1]
else:
    parser.error("Expecting at least three arguments.")

sub = parse_slice(options.slice)
psf = PSFFile(path_psf)

if options.unit_cell_str is None:
    track_cell = None
else:
    track_cell = cell.TrackCell.from_cell_str(options.unit_cell_str, sub)

if options.output_prefix is None:
    if vel_prefix is None:
        output_prefix = pos_prefix
        if output_prefix.endswith(".pos"):
            output_prefix = output_prefix[:-4]
    else:
        output_prefix = os.path.commonprefix([pos_prefix, vel_prefix])
    while output_prefix[-1] == '.':
        output_prefix = output_prefix[:-1]
else:
    output_prefix = options.output_prefix


if kind == 'bond':
    if len(filter_args) == 0:
        atom_filter1 = AtomFilter()
        atom_filter2 = AtomFilter()
    elif len(filter_args) == 2:
        atom_filter1 = AtomFilter(filter_args[0])
        atom_filter2 = AtomFilter(filter_args[1])
    else:
        parser.error("When kind is bond, two or none atom filter arguments are expected, got %i." % len(filter_args))

    for index1, index2 in psf.bonds:
        if ((atom_filter1(index1) and atom_filter2(index2)) or
            (atom_filter1(index2) and atom_filter2(index1))):
            try:
                pos_name = '%s.bond.pos.%07i.%07i' % (output_prefix, index1, index2)
                if vel_prefix is None:
                    dump_track(pos_name, vector.dist(
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                        track_cell=track_cell,
                    ))
                else:
                    vel_name = '%s.bond.vel.%07i.%07i' % (output_prefix, index1, index2)
                    bond_pos, bond_vel = vector.dist(
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index2), sub),
                        track_cell=track_cell,
                    )
                    dump_track(pos_name, bond_pos)
                    dump_track(vel_name, bond_vel)
                log("DONE %s" % pos_name)
            except TrackNotFoundError, e:
                log("WARNING %s" % str(e))

elif kind == 'bend':
    if len(filter_args) == 0:
        atom_filter1 = AtomFilter()
        atom_filter2 = AtomFilter()
        atom_filter3 = AtomFilter()
    elif len(filter_args) == 3:
        atom_filter1 = AtomFilter(filter_args[0])
        atom_filter2 = AtomFilter(filter_args[1])
        atom_filter3 = AtomFilter(filter_args[2])
    else:
        parser.error("When kind is bend, three or none atom filter arguments are expected, got %i." % len(filter_args))

    for index1, index2, index3 in psf.bends:
        if ((atom_filter1(index1) and atom_filter2(index2) and atom_filter3(index3)) or
            (atom_filter1(index3) and atom_filter2(index2) and atom_filter3(index1))):
            try:
                pos_name = '%s.bend.pos.%07i.%07i.%07i' % (output_prefix, index1, index2, index3)
                if vel_prefix is None:
                    dump_track(pos_name, vector.bend(
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                        return_cos=options.cos,
                        track_cell=track_cell,
                    ))
                else:
                    vel_name = '%s.bend.vel.%07i.%07i.%07i' % (output_prefix, index1, index2, index3)
                    bend_pos, bend_vel = vector.bend(
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index2), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index3), sub),
                        return_cos=options.cos,
                        track_cell=track_cell,
                    )
                    dump_track(pos_name, bend_pos)
                    dump_track(vel_name, bend_vel)
                log("DONE %s" % pos_name)
            except TrackNotFoundError, e:
                log("WARNING %s" % str(e))

elif kind == 'span':
    if len(filter_args) == 0:
        atom_filter1 = AtomFilter()
        atom_filter2 = AtomFilter()
        atom_filter3 = AtomFilter()
    elif len(filter_args) == 3:
        atom_filter1 = AtomFilter(filter_args[0])
        atom_filter2 = AtomFilter(filter_args[1])
        atom_filter3 = AtomFilter(filter_args[2])
    else:
        parser.error("When kind is span, three or none atom filter arguments are expected, got %i." % len(filter_args))

    for index1, index2, index3 in psf.bends:
        if ((atom_filter1(index1) and atom_filter2(index2) and atom_filter3(index3)) or
            (atom_filter1(index3) and atom_filter2(index2) and atom_filter3(index1))):
            try:
                pos_name = '%s.span.pos.%07i.%07i.%07i' % (output_prefix, index1, index2, index3)
                if vel_prefix is None:
                    dump_track(pos_name, vector.dist(
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                        track_cell=track_cell,
                    ))
                else:
                    vel_name = '%s.span.vel.%07i.%07i.%07i' % (output_prefix, index1, index2, index3)
                    span_pos, span_vel = vector.dist(
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index3), sub),
                        track_cell=track_cell,
                    )
                    dump_track(pos_name, span_pos)
                    dump_track(vel_name, span_vel)
                log("DONE %s" % pos_name)
            except TrackNotFoundError, e:
                log("WARNING %s" % str(e))

elif kind == 'dihed':
    if len(filter_args) == 0:
        atom_filter1 = AtomFilter()
        atom_filter2 = AtomFilter()
        atom_filter3 = AtomFilter()
        atom_filter4 = AtomFilter()
    elif len(filter_args) == 4:
        atom_filter1 = AtomFilter(filter_args[0])
        atom_filter2 = AtomFilter(filter_args[1])
        atom_filter3 = AtomFilter(filter_args[2])
        atom_filter4 = AtomFilter(filter_args[3])
    else:
        parser.error("When kind is dihed, four or none atom filter arguments are expected, got %i." % len(filter_args))

    for index1, index2, index3, index4 in psf.dihedrals:
        if ((atom_filter1(index1) and atom_filter2(index2) and atom_filter3(index3) and atom_filter4(index4)) or
            (atom_filter1(index4) and atom_filter2(index3) and atom_filter3(index2) and atom_filter4(index1))):
            try:
                pos_name = '%s.dihed.pos.%07i.%07i.%07i.%07i' % (output_prefix, index1, index2, index3, index4)
                if vel_prefix is None:
                    dump_track(pos_name, vector.dihed(
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index4), sub),
                        return_cos=options.cos,
                        track_cell=track_cell,
                    ))
                else:
                    vel_name = '%s.dihed.vel.%07i.%07i.%07i.%07i' % (output_prefix, index1, index2, index3, index4)
                    dihed_pos, dihed_vel = vector.dihed(
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index4), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index1), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index2), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index3), sub),
                        vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index4), sub),
                        return_cos=options.cos,
                        track_cell=track_cell,
                    )
                    dump_track(pos_name, dihed_pos)
                    dump_track(vel_name, dihed_vel)
                log("DONE %s" % pos_name)
            except TrackNotFoundError, e:
                log("WARNING %s" % str(e))

elif kind == 'dtl':
    from molmod import GraphSearch, CustomPattern, CriteriaSet, Graph

    if len(filter_args) == 0:
        atom_filter1 = AtomFilter()
        atom_filter2 = AtomFilter()
        atom_filter3 = AtomFilter()
    elif len(filter_args) == 3:
        atom_filter1 = AtomFilter(filter_args[0])
        atom_filter2 = AtomFilter(filter_args[1])
        atom_filter3 = AtomFilter(filter_args[2])
    else:
        parser.error("When kind is dtl, three or none atom filter arguments are expected, got %i." % len(filter_args))

    graph = psf.get_graph()
    match_generator = GraphSearch(CustomPattern(
        Graph([(0,1),(0,2)]),
        [CriteriaSet({0: atom_filter1, 1: atom_filter2, 2: atom_filter3})],
        vertex_tags = {0: 0, 1: 1, 2: 2}
    ))

    for match in match_generator(graph):
        index1 = match.forward[0]
        index2 = match.forward[1]
        index3 = match.forward[2]
        try:
            pos_name = '%s.dtl.pos.%07i.%07i.%07i' % (output_prefix, index1, index2, index3)
            if vel_prefix is None:
                dump_track(pos_name, vector.dtl(
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                    track_cell=track_cell,
                ))
            else:
                vel_name = '%s.dtl.vel.%07i.%07i.%07i' % (output_prefix, index1, index2, index3)
                dtl_pos, dtl_vel = vector.dtl(
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index1), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index2), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index3), sub),
                    track_cell=track_cell,
                )
                dump_track(pos_name, dtl_pos)
                dump_track(vel_name, dtl_vel)
            log("DONE %s" % pos_name)
        except TrackNotFoundError, e:
            log("WARNING %s" % str(e))

elif kind == 'oop':
    from molmod.graphs import GraphSearch, CustomPattern, CriteriaSet, Graph

    if len(filter_args) == 0:
        atom_filter1 = AtomFilter()
        atom_filter2 = AtomFilter()
        atom_filter3 = AtomFilter()
        atom_filter4 = AtomFilter()
    elif len(filter_args) == 4:
        atom_filter1 = AtomFilter(filter_args[0])
        atom_filter2 = AtomFilter(filter_args[1])
        atom_filter3 = AtomFilter(filter_args[2])
        atom_filter4 = AtomFilter(filter_args[3])
    else:
        parser.error("When kind is oop, four or none arguments are expected, got %i." % len(filter_args))

    graph = psf.get_graph()
    match_generator = GraphSearch(CustomPattern(
        Graph([(3,0), (3,1), (3,2)]),
        [CriteriaSet({0: atom_filter1, 1: atom_filter2, 2: atom_filter3, 3: atom_filter4})],
    ))

    for match in match_generator(graph):
        index1 = match.forward[0]
        index2 = match.forward[1]
        index3 = match.forward[2]
        index4 = match.forward[3]
        try:
            pos_name = '%s.oop.pos.%07i.%07i.%07i.%07i' % (output_prefix, index1, index2, index3, index4)
            if vel_prefix is None:
                dump_track(pos_name, vector.oop(
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index4), sub),
                    track_cell=track_cell,
                ))
            else:
                vel_name = '%s.oop.vel.%07i.%07i.%07i.%07i' % (output_prefix, index1, index2, index3, index4)
                oop_pos, oop_vel = vector.oop(
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index1), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index2), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index3), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (pos_prefix, index4), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index1), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index2), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index3), sub),
                    vector.TrackVector.from_prefix("%s.%07i" % (vel_prefix, index4), sub),
                    track_cell=track_cell,
                )
                dump_track(pos_name, oop_pos)
                dump_track(vel_name, oop_vel)
            log("DONE %s" % pos_name)
        except TrackNotFoundError, e:
            log("WARNING %s" % str(e))

else:
    parser.error("Unknown kind: %s" % kind)


