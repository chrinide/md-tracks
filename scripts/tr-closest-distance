#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import dump_track
from tracks.cell import TrackCell
from tracks.vector import TrackVector
from tracks.parse import parse_slice, yield_unit_cells
from tracks.log import log

import numpy, itertools
from optparse import OptionParser


usage = """%prog [options] prefix_a1 [prefix_a2 ...] - prefix_b1 [prefix_b2] output

%prog computes the closest distance at each time step between the Cartesian
coordinates in the files ${prefix_a*}.${c} and ${prefix_b*}.${c}, where ${c}
is x, y or z. The result is written to ${output}.

%prog -h prints out all available options."""

parser = OptionParser(usage)
parser.add_option(
    "-q", "--quiet", action="store_false", dest="verbose", default=True,
    help="Don't print any output."
)
parser.add_option(
    "-c", "--cell", dest="unit_cell_str", default=None,
    help="Take into account the given periodic boundary conditions.",
)
(options, args) = parser.parse_args()

path_out = args[-1]
prefixes_a, prefixes_b = " ".join(args[:-1]).split(" - ")
prefixes_a = prefixes_a.split()
if len(prefixes_a) == 0:
    parser.error("At least one prefix_a expected.")
prefixes_b = prefixes_b.split()
if len(prefixes_b) == 0:
    parser.error("At least one prefix_b expected.")

if options.unit_cell_str is None:
    cell = None
else:
    cell = TrackCell.from_cell_str(options.unit_cell_str)

closest_distances = None

for prefix_a in prefixes_a:
    vec_a = TrackVector.from_prefix(prefix_a)
    for prefix_b in prefixes_b:
        vec_b = TrackVector.from_prefix(prefix_b)
        delta = vec_a - vec_b
        if cell is not None:
            delta = cell.shortest_vector(delta)
        distances = delta.norm()
        if closest_distances is None:
            closest_distances = distances
        else:
            selection = distances < closest_distances
            closest_distances[selection] = distances[selection]

dump_track(path_out, closest_distances)
