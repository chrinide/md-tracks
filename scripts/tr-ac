#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# Contact information:
#
# Supervisors
#
# Prof. Dr. Michel Waroquier and Prof. Dr. Ir. Veronique Van Speybroeck
#
# Center for Molecular Modeling
# Ghent University
# Proeftuinstraat 86, B-9000 GENT - BELGIUM
# Tel: +32 9 264 65 59
# Fax: +32 9 264 65 60
# Email: Michel.Waroquier@UGent.be
# Email: Veronique.VanSpeybroeck@UGent.be
#
# Author
#
# Ir. Toon Verstraelen
# Center for Molecular Modeling
# Ghent University
# Proeftuinstraat 86, B-9000 GENT - BELGIUM
# Tel: +32 9 264 65 56
# Email: Toon.Verstraelen@UGent.be
#
# --


from tracks.core import load_track, dump_track
from tracks.parse import parse_x_step
from tracks.log import log
from molmod.units import parse_unit

import numpy
from optparse import OptionParser


usage = """%prog [options] input1 [input2 ...] {time_axis|time_step} output

%prog computes the average auto-correlation function for a set of tracks
(${input1}, ${input2}, ...) and stores the result in a track ${output}.
The normalized auto- correlation function will be stored in
${output}.normalized. The next-to-last argument is a track that contains the
time-axis, or it can also be the time step between two discrete data points.

%prog -h prints out all available options."""

parser = OptionParser(usage)
parser.add_option(
    "-m", "--max-delta-t",
    help="Determines the maximum time-difference for which the auto- "
         "correlation has to be computed. This value defaults to half the "
         "track size. The lower this value, the better the statistical "
         "accuracy of the end result."
)
parser.add_option(
    "-n", "--non-zero-average", default=False, action="store_true",
    help="Take into account that the average of the tracks is non-zero.",
)
parser.add_option(
    "-q", "--quiet", action="store_false", dest="verbose", default=True,
    help="Don't print any output."
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) >= 3:
    paths_in = args[:-2]
    time_step = parse_x_step(args[-2])
    path_out = args[-1]
else:
    parser.error("Expecting at least three arguments.")

length = len(load_track(paths_in[0]))
if options.max_delta_t is None:
    max_delta_steps = length/2
else:
    max_delta_steps = int(parse_unit(options.max_delta_t)/time_step)
    if max_delta_steps <= 0:
        parser.error("The option --max-delta-t must be strictly positive.")
average_steps = length - max_delta_steps
average_time = average_steps*time_step

result = 0
for path_in in paths_in:
    f = load_track(path_in)
    if len(f) != length:
        raise Error("All input tracks must have the same length.")
    if options.non_zero_average:
        f = f - f.mean()
    tmp = numpy.correlate(f, f[:average_steps], 'valid')/average_steps
    result += tmp
    log("PROCESSED %s" % path_in)
result /= len(paths_in)

dump_track(path_out, result)
log("WRITTEN %s" % path_out)
dump_track("%s.normalized" % path_out, result/result[0])
log("WRITTEN %s.normalized" % path_out)

