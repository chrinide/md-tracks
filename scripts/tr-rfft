#!/usr/bin/env python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track, dump_track
from tracks.parse import parse_slice, parse_x_step
from tracks.optparse import add_quiet_option, add_slice_option
from tracks.log import log, usage_tail

from molmod.constants import lightspeed

import numpy
from optparse import OptionParser


usage = """%prog [options] input1 [input2 ...] {time_axis|time_step} output_prefix

%prog performs a forward real Fourier transform on the tracks ${input1},
${input2}, ... and stores each transform in ${input*}.rfft. When all inputs have
the same size, %prog also computes a frequency and wavenumber axes which can be
used for plotting and filter manipulations. These axes are written to:
${output_prefix}.freqencies and ${output_prefix}.wavenumbers.
""" + usage_tail

parser = OptionParser(usage)
add_slice_option(parser)
add_quiet_option(parser)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) >= 2:
    paths_in = args[:-2]
    time_step = parse_x_step(args[-2])
    output_prefix = args[-1]
else:
    parser.error("Expecting at least one argument.")

sub = parse_slice(options.slice)
time_step *= sub.step

data_size = None
for path_in in paths_in:
    path_out = "%s.rfft" % path_in
    f = load_track(path_in, sub)
    # keep track of the data size
    if data_size is None:
        data_size = len(f)
    elif data_size > 0 and len(f) != data_size:
        data_size = -1
    # do the fourier transform
    result = numpy.fft.rfft(f)
    dump_track(path_out, result)
    log("TRANSFORMED %s -> %s" % (path_in, path_out))

if data_size is not None and data_size > 0:
    duration = time_step*data_size
    transform_size = data_size/2+1
    dump_track("%s.wavenumbers" % output_prefix, 1/duration/lightspeed*numpy.arange(transform_size))
    log("WRITTEN %s.wavenumbers" % output_prefix)
    dump_track("%s.frequencies" % output_prefix, 1/duration*numpy.arange(transform_size))
    log("WRITTEN %s.frequencies" % output_prefix)


