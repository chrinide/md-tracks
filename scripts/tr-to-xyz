#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# Contact information:
#
# Supervisors
#
# Prof. Dr. Michel Waroquier and Prof. Dr. Ir. Veronique Van Speybroeck
#
# Center for Molecular Modeling
# Ghent University
# Proeftuinstraat 86, B-9000 GENT - BELGIUM
# Tel: +32 9 264 65 59
# Fax: +32 9 264 65 60
# Email: Michel.Waroquier@UGent.be
# Email: Veronique.VanSpeybroeck@UGent.be
#
# Author
#
# Ir. Toon Verstraelen
# Center for Molecular Modeling
# Ghent University
# Proeftuinstraat 86, B-9000 GENT - BELGIUM
# Tel: +32 9 264 65 56
# Email: Toon.Verstraelen@UGent.be
#
# --


from tracks.convert import tracks_to_xyz
from tracks.parse import parse_slice, yield_unit_cells
from tracks.util import AtomFilter
from tracks.log import log
from molmod.units import parse_unit
from molmod.io.xyz import XYZFile
from molmod.io.psf import PSFFile

from optparse import OptionParser


usage = """%prog [options] ref.xyz [[ref.psf] unit_cell] prefix output.xyz

%prog reads the atomic coordinates from tracks with the following format:
${prefix}.${index}.${c} where ${index} is the atom index and ${c} is x, y or z.
The atom symbols are read from ${ref.xyz}. The output trajectory is written to
${output.xyz}.

Optionally a unit_cell parameter can be given. The effect is that the atom
coordinates will be wrapped into the periodic box. If ref.psf is also given,
molecules will be wrapped as a whole. The unit_cell can be given in differnt
formats:
    - a,: an cubic unit cell with ridge a.
    - a,b,c: The parameters of an orthorhombic cell.
    - a,b,c,alpha,beta,gamma: The parameters for a triclinic cell.
    - ax,ay,az,bx,by,bz,cx,cy,cz: The cartesian parameters for a triclinic cell.
    - cell_prefix: A track prefix can be used to indicate a time dependent unit cell.
    (The presence of comma's is used to differentiate between all the possibilities.)

%prog -h prints out all available options."""

parser = OptionParser(usage)
parser.add_option(
    "-s", "--slice", default="::",
    help="Subsample the trajectory with the given slice start:stop:step "
         "where start, stop and step must be integers or can be omitted. "
         "The slice interpretation is pythonic. [default=%default]",
)
parser.add_option(
    "-u", "--unit", default="angstrom",
    help="The unit in which the data in the xyz file are written. [default=%default]",
)
parser.add_option(
    "-a", "--filter-atoms",
    help="Only consider the atoms listed in FILTER_ATOMS. FILTER_ATOMS is a "
         "comma separated list of of integers. Counting starts at zero.",
)
parser.add_option(
    "-q", "--quiet", help="Don't print any output.",
    action="store_false", dest="verbose", default=True,
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) == 3:
    ref_xyz_path, prefix, output_path = args
    ref_psf_path = None
    unit_cell_str = None
elif len(args) == 4:
    ref_xyz_path, unit_cell_str, prefix, output_path = args
    ref_psf_path = None
elif len(args) == 5:
    ref_xyz_path, ref_psf_path, unit_cell_str, prefix, output_path = args
else:
    parser.error("Expecting three, four or five arguments.")

ref = XYZFile(ref_xyz_path)
sub = parse_slice(options.slice)
file_unit = parse_unit(options.unit)
atom_filter = AtomFilter(options.filter_atoms)

if unit_cell_str is None:
    unit_cell_iter = None
    groups = None
else:
    unit_cell_iter = yield_unit_cells(unit_cell_str)
    if ref_psf_path is None:
        groups = None
    else:
        psf = PSFFile(ref_psf_path)
        groups = psf.get_groups()

tracks_to_xyz(prefix, output_path, ref.symbols, sub, file_unit, atom_filter.filter_atoms, unit_cell_iter, groups)

