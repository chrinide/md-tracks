#!/usr/bin/env python
# -*- coding: utf-8 -*-
# MD-Tracks is a trajectory analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2012 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
#--


from tracks.core import load_track, dump_track
from tracks.optparse import add_quiet_option
from tracks.log import log, usage_tail

from molmod.periodic import periodic
from molmod.io.psf import PSFFile

import numpy, os
from optparse import OptionParser


usage = """%prog [options] prefix output_middle_word connectivity.psf

%prog computes the time-dependent center of mass of the molecules defined in
the connectivity file. The output is written as
directory/com.${output_middle_word}.${i}.${c}
where
 - ${middle_word} is the last argument but one
 - ${i} is the molecule index from the psf file (counting starts at zero)
 - ${c} is x, y or z
Also the coordinates relative to the com are stored in tracks:
directory/rel.${output_middle_word}.${i}.${c}
 - ${middle_word} is the last argument but one
 - ${i} is the atom index from the psf file (counting starts at zero)
 - ${c} is x, y or z
The prefix is the part of the paths to the coordinate tracks, without the index
nor the x, y or z. For example: tracks/atom.pos
""" + usage_tail

parser = OptionParser(usage)
add_quiet_option(parser)
parser.add_option(
    "-m", "--filter-molecules",
    help="Only consider the molecules listed in FILTER_MOLECULES. This is a "
         "comma-separated list of molecule indexes. Counting starts at zero.",
)
parser.add_option(
    "--rel", action="store_true", dest="relative", default=False,
    help="Don't write out the relative coordinates."
)
parser.add_option(
    "--com-prefix",
    help="Use COM-PREFIX to dump the center of mass data instead of 'com'.",
)
parser.add_option(
    "--rel-prefix",
    help="Use REL-PREFIX to dump the relative coordinates instead of 'rel'.",
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) == 3:
    prefix, middle_word, path_psf = args
    directory = os.path.dirname(prefix)
else:
    parser.error("Expecting three arguments.")


psf = PSFFile(path_psf)

if options.filter_molecules is None:
    m_indexes = frozenset(numpy.unique(psf.molecules))
else:
    m_indexes = frozenset(int(word) for word in options.filter_molecules.split(","))

molecules = dict(
    (m_index, (psf.molecules==m_index).nonzero()[0])
    for m_index in m_indexes
)

if options.com_prefix is None:
    options.com_prefix = os.path.join(directory, "com")

if options.rel_prefix is None:
    options.rel_prefix = os.path.join(directory, "rel")

for m_index, a_indexes in molecules.iteritems():
    for c in 'xyz':
        com = 0
        total_mass = 0
        for a_index in a_indexes:
            mass = periodic[psf.numbers[a_index]].mass
            com += load_track("%s.%07i.%s" % (prefix, a_index, c))*mass
            total_mass += mass
        com /= total_mass
        name = "%s.%s.%07i.%s" % (options.com_prefix, middle_word, m_index, c)
        log("WRITTEN %s" % name)
        dump_track(name, com)

        if options.relative:
            for a_index in a_indexes:
                tmp = load_track("%s.%07i.%s" % (prefix, a_index, c))
                tmp = tmp - com
                name = "%s.%s.%07i.%s" % (options.rel_prefix, middle_word, a_index, c)
                log("WRITTEN %s" % name)
                dump_track(name, tmp)


