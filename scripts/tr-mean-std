#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track, dump_track
from tracks.parse import parse_slice
from tracks.log import log

import numpy
from optparse import OptionParser


usage = """%prog [options] input1 input2 [input3 ...] output_prefix

%prog computes the mean, the standard deviation and the standard error on the
mean of the input tracks and writes the result to ${output_prefix}.mean,
${output_prefix}.std and ${output_prefix}.error.

%prog -h prints out all available options."""

parser = OptionParser(usage)
parser.add_option(
    "-s", "--slice", default="::",
    help="Subsample the input track with the given slice start:stop:step "
         "where start, stop and step must be integers or can be omitted. "
         "The slice interpretation is pythonic. [default=%default]",
)
parser.add_option(
    "-q", "--quiet", action="store_false", dest="verbose", default=True,
    help="Don't print any output."
)
(options, args) = parser.parse_args()


log.verbose = options.verbose
if len(args) >= 3:
    paths_in = args[:-1]
    path_out = args[-1]
    path_mean = "%s.mean" % path_out
    path_std = "%s.std" % path_out
    path_error = "%s.error" % path_out
else:
    parser.error("Expecting at least three arguments.")

sub = parse_slice(options.slice)

mean = 0
mean_squared = 0
for path_in in paths_in:
    f = load_track(path_in, sub)
    mean += f
    mean_squared += f*f
    log("PROCESSED %s" % path_in)
mean /= len(paths_in)
mean_squared /= len(paths_in)

dump_track(path_mean, mean)
log("WRITTEN %s" % path_mean)
dump_track(path_std, numpy.sqrt(mean_squared-mean**2))
log("WRITTEN %s" % path_std)
dump_track(path_error, numpy.sqrt((mean_squared-mean**2)/len(paths_in)))
log("WRITTEN %s" % path_error)


