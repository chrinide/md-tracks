#!/usr/bin/python
# MD-Tracks is a statistical analysis toolkit for molecular dynamics
# and monte carlo simulations.
# Copyright (C) 2007 - 2009 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of MD-Tracks.
#
# MD-Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "MD-TRACKS: A productive solution for the advanced analysis of Molecular
# Dynamics and Monte Carlo simulations", Toon Verstraelen, Marc Van Houteghem,
# Veronique Van Speybroeck and Michel Waroquier, Journal of Chemical Information
# and Modeling, 48 (12), 2414-2424, 2008
# DOI:10.1021/ci800233y
#
# MD-Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track, dump_track
from tracks.parse import parse_slice
from tracks.log import usage_tail

import numpy, os
from optparse import OptionParser


usage = """%prog [options] input1 [input2 ...] slice destination

%prog slices the tracks ${input1}, ${input2}, ... and writes the result to the
directory ${destination}. If only one input is given, ${destination} may also
be a file.

The ${slice} argument has the following format: 'start:stop:step' where start,
stop and step must be integers or can be omitted. The slice interpretation is
pythonic.
""" + usage_tail

parser = OptionParser(usage)
(options, args) = parser.parse_args()


if len(args) >= 3:
    paths_in = args[:-2]
    sub, destination = args[-2:]
else:
    parser.error("Expecting at least three arguments.")


sub = parse_slice(sub)
if os.path.isdir(destination):
    for path_in in paths_in:
        path_out = os.path.join(destination, os.path.basename(path_in))
        dump_track(path_out, load_track(path_in, sub))
else:
    if len(paths_in) == 1:
        dump_track(destination, load_track(paths_in[0], sub))
    else:
        parser.error("The destination can only be a file when one input is given.")


