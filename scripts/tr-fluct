#!/usr/bin/python
# Tracks provides tools for analyzing large trajectory files.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Tracks.
#
# Tracks is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Tracks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


from tracks.core import load_track, dump_track
from tracks.parse import parse_slice
from molmod.units import parse_unit

import numpy
from optparse import OptionParser


usage = """%prog [options] input1 [input2] output

%prog simply computes:
output = (input1 - <input1>)*(input1 - <input1>)
or
output = (input1 - <input1>)*(input2 - <input2>)
when input2 is given, where <...> stands for the average over the whole track.
This script is usefull when deriving macroscopic properties from fluctuations
in a molecular dynamics simulation. The output can be studied with tr-blav.

%prog -h prints out all available options."""

parser = OptionParser(usage)
parser.add_option(
    "-s", "--slice", default="::",
    help="Subsample the input track with the given slice start:stop:step "
         "where start, stop and step must be integers or can be omitted. "
         "The slice interpretation is pythonic. [default=%default]",
)
(options, args) = parser.parse_args()


if len(args) == 2:
    path_in1, path_out = args
    path_in2 = path_in1
elif len(args) == 3:
    path_in1, path_in2, path_out = args
else:
    parser.error("Expecting two or three arguments.")

sub = parse_slice(options.slice)
in1 = load_track(path_in1)
in2 = load_track(path_in2)
dump_track(path_out, (in1-in1.mean())*(in2-in2.mean()))
